<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"  
    xmlns:beans="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    					http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/security 
                        http://www.springframework.org/schema/security/spring-security-3.0.xsd">  
  
    <!-- Spring Security采用就近原则,有多个约束时,从上至下只要找到第一条满足就返回,因此因该将最严格的约束放在最前面,而将最宽松的约束放在最后面.auto-config属性可以让spring security为我们自动配置几种常用的权限控制机制，包括form,anonymous, rememberMe等。当然你也可以手工配置。-->  
   <!--  <http auto-config="true">  
        我们利用intercept-url来判断用户需要具有何种权限才能访问对应的url资源，可以在pattern中指定一个特定的url资源，也可以使用通配符指定一组类似的url资源。例子中定义的两个intercepter-url，第一个用来控制对/security/**的访问，第二个使用了通配符/**，说明它将控制对系统中所有url资源的访问。  
        <intercept-url pattern="/security/**" access="ROLE_ADMIN" />  
        <intercept-url pattern="/**" access="ROLE_ADMIN,ROLE_USER" />  
        <intercept-url pattern="/login.jsp*" filters="none" />  
        <logout logout-url="/logout.jsp"  
            logout-success-url="/j_spring_security_check" />  
    </http>  --> 
  
    <!-- 使用内存权限管理的配置信息, 在tomcat启动时,会加载这个文件并一直保存在内存中,知道应用程序重启,所以也叫内存权限管理  
        <authentication-provider>  
        <user-service>  
        <user name="admin" password="tomcat" authorities="ROLE_ADMIN"/>  
        <user name="liky" password="redhat" authorities="ROLE_USER"/>       
        </user-service>  
        </authentication-provider>  
    -->  
    <!-- 使用数据库作为权限管理的来源,data-source-ref指定了数据源,所指定的数据源必须包含users, authorities表,并符合security的定义规范 -->  
    <http auto-config="true">
    	<intercept-url pattern="/**" access="ROLE_SPITTER"/>
    </http>
    
</beans:beans>  